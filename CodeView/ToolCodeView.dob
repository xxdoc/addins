VERSION 5.00
Object = "{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.0#0"; "mscomctl.ocx"
Begin VB.UserDocument ToolCodeView 
   ClientHeight    =   3750
   ClientLeft      =   0
   ClientTop       =   0
   ClientWidth     =   4305
   HScrollSmallChange=   225
   ScaleHeight     =   3750
   ScaleWidth      =   4305
   VScrollSmallChange=   225
   Begin VB.ListBox lstDbg 
      Height          =   840
      Left            =   2250
      TabIndex        =   4
      Top             =   990
      Visible         =   0   'False
      Width           =   1680
   End
   Begin VB.Frame fraFilter 
      BorderStyle     =   0  'None
      Height          =   375
      Left            =   45
      TabIndex        =   1
      Top             =   2070
      Width           =   2085
      Begin VB.TextBox txtFilter 
         Height          =   285
         Left            =   450
         TabIndex        =   2
         Top             =   0
         Width           =   1500
      End
      Begin VB.Label lblFilter 
         Caption         =   "Filter:"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   -1  'True
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FF0000&
         Height          =   240
         Left            =   0
         TabIndex        =   3
         Top             =   45
         Width           =   420
      End
   End
   Begin VB.Timer Timer 
      Enabled         =   0   'False
      Interval        =   5000
      Left            =   840
      Top             =   1440
   End
   Begin MSComctlLib.ImageList Babel 
      Left            =   180
      Top             =   1320
      _ExtentX        =   1005
      _ExtentY        =   1005
      BackColor       =   -2147483643
      ImageWidth      =   16
      ImageHeight     =   16
      MaskColor       =   12632256
      _Version        =   393216
      BeginProperty Images {2C247F25-8591-11D1-B16A-00C0F0283628} 
         NumListImages   =   16
         BeginProperty ListImage1 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":0000
            Key             =   ""
         EndProperty
         BeginProperty ListImage2 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":039A
            Key             =   ""
         EndProperty
         BeginProperty ListImage3 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":0734
            Key             =   ""
         EndProperty
         BeginProperty ListImage4 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":0ACE
            Key             =   ""
         EndProperty
         BeginProperty ListImage5 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":0E68
            Key             =   ""
         EndProperty
         BeginProperty ListImage6 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":1202
            Key             =   ""
         EndProperty
         BeginProperty ListImage7 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":159C
            Key             =   ""
         EndProperty
         BeginProperty ListImage8 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":1936
            Key             =   ""
         EndProperty
         BeginProperty ListImage9 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":1CD0
            Key             =   ""
         EndProperty
         BeginProperty ListImage10 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":206A
            Key             =   ""
         EndProperty
         BeginProperty ListImage11 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":2404
            Key             =   ""
         EndProperty
         BeginProperty ListImage12 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":299E
            Key             =   ""
         EndProperty
         BeginProperty ListImage13 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":2D38
            Key             =   ""
         EndProperty
         BeginProperty ListImage14 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":30D2
            Key             =   ""
         EndProperty
         BeginProperty ListImage15 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":366C
            Key             =   ""
         EndProperty
         BeginProperty ListImage16 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "ToolCodeView.dox":3A06
            Key             =   ""
         EndProperty
      EndProperty
   End
   Begin MSComctlLib.TreeView CodeView 
      Height          =   2000
      Left            =   0
      TabIndex        =   0
      Top             =   0
      Width           =   2000
      _ExtentX        =   3519
      _ExtentY        =   3519
      _Version        =   393217
      HideSelection   =   0   'False
      Indentation     =   0
      LabelEdit       =   1
      LineStyle       =   1
      Sorted          =   -1  'True
      Style           =   7
      ImageList       =   "Babel"
      Appearance      =   1
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Courier New"
         Size            =   9
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
   End
   Begin VB.Menu mnupopup 
      Caption         =   "mnupopup"
      Visible         =   0   'False
      Begin VB.Menu mnuFindReferences 
         Caption         =   "Find References"
      End
      Begin VB.Menu mnuExtractMethod 
         Caption         =   "Extract Method"
         Begin VB.Menu mnuExtractAsText 
            Caption         =   "as Text"
         End
         Begin VB.Menu mnuExtractAsHTML 
            Caption         =   "as Html"
         End
      End
      Begin VB.Menu mnuRenameFunction 
         Caption         =   "Simple Rename"
         Enabled         =   0   'False
         Visible         =   0   'False
      End
      Begin VB.Menu mnuShowLineCount 
         Caption         =   "Show Line Count"
      End
      Begin VB.Menu mnuCopyPublic 
         Caption         =   "Copy Public"
      End
   End
End
Attribute VB_Name = "ToolCodeView"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

'todo: save expanded states from last run?
'      if filter active auto expand parent nodes if has results?
'      CodeView_Mouseup: if child of constants or variables disable extract method..(no harm though)

Public ActiveCodeModule As CodeModule
Public CurMod As CodeModule
Public ProjectName As String

Private filterChanged As Boolean
Private PrevMemberCount As Long
'Private Line As Long
'Private LineCount As Long
Private Nodes(5) As Node
Private initilized As Boolean
Private curEntry As CEntry

Const DEBUGMODE = False

Public Sub DBG(msg As String)
    If DEBUGMODE Then lstDbg.AddItem msg & " " & Format(Now, "h:m:ss")
End Sub

Private Sub CodeView_DblClick()

    On Error Resume Next
    If ActiveCodeModule Is Nothing Then Exit Sub
    If curEntry Is Nothing Then Exit Sub
    
    If Not CodeView.SelectedItem Is Nothing Then
        ActiveCodeModule.parent.Activate
        ActiveCodeModule.CodePane.SetSelection curEntry.loc, 1, curEntry.loc, 1
        ActiveCodeModule.CodePane.Window.SetFocus
    End If
    
End Sub

Private Sub CodeView_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error Resume Next
    If KeyCode = 116 Then  'f5
        filterChanged = True
        Reload
    End If
End Sub

Private Sub CodeView_Mouseup(Button As Integer, Shift As Integer, x As Single, y As Single)
    On Error Resume Next
    If Not CodeView.SelectedItem Is Nothing Then
        mnuCopyPublic.Visible = (CodeView.SelectedItem.Text = "Functions")
    End If
    If Button = vbRightButton Then PopupMenu mnuPopup
End Sub

Private Sub CodeView_NodeClick(ByVal Node As MSComctlLib.Node)
    Dim value As String
    Dim e As CEntry
    
    On Error Resume Next
    
    Set curEntry = Nothing
    If ActiveCodeModule Is Nothing Then Exit Sub
    
    Set e = Node.Tag
    If e Is Nothing Then Exit Sub
    
    Set curEntry = e
    
    ActiveCodeModule.CodePane.Show
    ActiveCodeModule.CodePane.TopLine = e.loc
    
End Sub

Function GetLineCountForNode(memberName As String) As Long
    Dim lineCount As Long
    On Error Resume Next
    lineCount = ActiveCodeModule.ProcCountLines(memberName, vbext_pk_Proc)
    If lineCount = 0 Then lineCount = ActiveCodeModule.ProcCountLines(memberName, vbext_pk_Get)
    If lineCount = 0 Then lineCount = ActiveCodeModule.ProcCountLines(memberName, vbext_pk_Let)
    If lineCount = 0 Then lineCount = ActiveCodeModule.ProcCountLines(memberName, vbext_pk_Set)
    GetLineCountForNode = lineCount
End Function

'this has to be called from reload and not a form_show
'on startup reload was being called first, then UserDocument_Show was calling InitCodeView which was blanking out
'the initial load leading to a confusing non-display _sometimes_
Sub InitCodeView()
    On Error GoTo hell
    
    Dim n As Node

    initilized = True
    CodeView.Nodes.Clear
    Set n = CodeView.Nodes.Add(, , "cv", "CodeView", 16)
    
    n.Bold = True
    n.Expanded = True
    
    Set Nodes(vbext_mt_Const) = CodeView.Nodes.Add("cv", tvwChild, , "Constants", vbext_mt_Const)
    Set Nodes(vbext_mt_Variable) = CodeView.Nodes.Add("cv", tvwChild, , "Variables", vbext_mt_Variable)
    Set Nodes(vbext_mt_Property) = CodeView.Nodes.Add("cv", tvwChild, , "Properties", vbext_mt_Property)
    Set Nodes(vbext_mt_Event) = CodeView.Nodes.Add("cv", tvwChild, , "Events", vbext_mt_Event)
    Set Nodes(vbext_mt_Method) = CodeView.Nodes.Add("cv", tvwChild, , "Functions", vbext_mt_Method)
    
    Nodes(vbext_mt_Event).Expanded = False 'to many
    Nodes(vbext_mt_Method).Expanded = True
    
    mnuShowLineCount.Checked = CBool(GetMySetting("ShowLineCount", 0))
        
    Exit Sub
hell:
    MsgBox "Err in InitCodeView: " & Err.Description
End Sub

Sub ClearCodeView()
    On Error Resume Next
    Freeze CodeView.hwnd
    ClearChildNodes CodeView, vbNullString, Nodes(vbext_mt_Const)
    ClearChildNodes CodeView, vbNullString, Nodes(vbext_mt_Variable)
    ClearChildNodes CodeView, vbNullString, Nodes(vbext_mt_Event)
    ClearChildNodes CodeView, vbNullString, Nodes(vbext_mt_Property)
    ClearChildNodes CodeView, vbNullString, Nodes(vbext_mt_Method)
    Unfreeze CodeView.hwnd
End Sub

'Private Function setVarDef(e As CEntry) As Boolean
'
'    'for variables the vb plugin api does not return the proper line number always :(
'    Dim i As Integer
'
'    For i = 0 To 100
'        x = ActiveCodeModule.Lines(e.loc + i, 1)
'        If InStr(x, e.name) > 0 Then
'            e.loc = e.loc + i
'            e.proto = x
'            setVarDef = True
'            Exit For
'        End If
'    Next
'
'End Function

Private Function getVarDefLine(name, start) As Long
    
    'for variables the vb plugin api does not return the proper line number always :(
    'todo: could be more precise..
    Dim i As Integer, x
    
    For i = 0 To 125
        x = ActiveCodeModule.Lines(start + i, 1)
        If InStr(x, name) > 0 Then
            getVarDefLine = start + i
            Exit For
        End If
    Next
    
End Function

Sub Reload(Optional NewModule As CodeModule)

    Dim mber As Member
    Dim n As Node, nn As Node
    Dim i As Long     'used to set image index
    Dim pos As Long
    Dim curProj As String
    Dim NodeName As String
    Dim protoType As String
    Dim key As String
    Dim e As CEntry
    
    On Error Resume Next
            
    If Not initilized Then InitCodeView
    
    curProj = g_VBInstance.ActiveVBProject.name
    If curProj <> ProjectName Then
        If Len(ProjectName) > 0 Then 'project name has changed..
            SaveMySetting ProjectName, Trim(txtFilter.Text)
            DBG "Saving filter for " & ProjectName
        End If
        ProjectName = curProj
        txtFilter.Text = Trim(GetMySetting(ProjectName, ""))
        DBG "Loading filter for " & ProjectName
    End If
    
    If Not NewModule Is Nothing Then
        If CurMod Is Nothing And ActiveCodeModule Is Nothing Then
             Set ActiveCodeModule = NewModule
        ElseIf ObjPtr(CurMod) <> ObjPtr(ActiveCodeModule) Then
            Set ActiveCodeModule = NewModule
            DBG "New Module"
        End If
    End If
   
    If ActiveCodeModule Is Nothing Then
        DBG "ActiveMod nothing"
        Exit Sub
    End If
    
    If ObjPtr(CurMod) = ObjPtr(ActiveCodeModule) And Not filterChanged Then
        DBG "No change"
        Exit Sub
    End If
    
    DBG "Loading: " & ActiveCodeModule.parent.name
    
    If ActiveCodeModule.Members.Count = 0 Then
        DBG "Members.count = 0"
        Exit Sub
    End If
    
    Set CurMod = ActiveCodeModule
    filterChanged = False
    ClearCodeView
    
    Freeze CodeView.hwnd
    For Each mber In ActiveCodeModule.Members
        i = 0
        Set e = New CEntry
        
        If mber.scope = vbext_Private Then
            i = 5
        ElseIf mber.scope = vbext_Friend Then
            i = 10
        End If
        
        e.mType = mber.Type
        e.loc = mber.CodeLocation
        
        If InStr(mber.name, "_Click") > 0 Or InStr(mber.name, "_Mouse") > 0 Or (mber.name Like "*_*Click") Then
            'lets move these to the Events nodes instead because there are allot
            'of them and the node is usually empty I know this isnt a complete list..but its the heaviest used..
             e.mType = vbext_mt_Event
        End If
        
        Select Case e.mType
            Case vbext_mt_Method, vbext_mt_Event
                e.loc = ActiveCodeModule.ProcBodyLine(mber.name, vbext_pk_Proc)
                e.lcnt = ActiveCodeModule.ProcCountLines(mber.name, vbext_pk_Proc)
                If Err.Number <> 0 Then 'sub has no body error possible...
                    e.loc = 0
                    Err.Clear
                End If
            Case vbext_mt_Property
                e.loc = ActiveCodeModule.ProcBodyLine(mber.name, vbext_pk_Get)
                e.lcnt = ActiveCodeModule.ProcCountLines(mber.name, vbext_pk_Get)
                If e.loc = 0 Then
                    e.loc = ActiveCodeModule.ProcBodyLine(mber.name, vbext_pk_Let)
                    e.lcnt = ActiveCodeModule.ProcCountLines(mber.name, vbext_pk_Let)
                End If
                If e.loc = 0 Then
                    e.loc = ActiveCodeModule.ProcBodyLine(mber.name, vbext_pk_Set)
                    e.lcnt = ActiveCodeModule.ProcCountLines(mber.name, vbext_pk_Set)
                End If
            Case vbext_mt_Variable
                e.loc = getVarDefLine(mber.name, e.loc)
        End Select
        
        Const minLen = 20
        NodeName = mber.name
        e.lineCount = GetLineCountForNode(mber.name)
        e.name = mber.name
        
        If mnuShowLineCount.Checked And mber.Type <> vbext_mt_Variable Then
            If Len(NodeName) < minLen Then NodeName = Left(NodeName & String(minLen, " "), minLen)
            NodeName = NodeName & " " & e.lcnt
        End If
        
        If e.loc = 0 Then
            e.proto = mber.name
        Else
            e.proto = ActiveCodeModule.Lines(e.loc, 1)
            If Len(e.proto) = 0 Then e.proto = mber.name   'addin api weirdness all I can presume..fuck it
        End If
        
        'If Len(protoType) = 0 Then Stop

        If Len(txtFilter) > 0 Then
            If VBA.Left(txtFilter, 1) = "-" And Len(txtFilter) > 1 Then   'subtractive filter like -mnu,cmd,lv
                Dim tmp() As String, addit As Boolean, x
                addit = True
                If InStr(txtFilter, ",") Then tmp = Split(Mid(txtFilter, 2), ",") Else tmp = Split(Mid(txtFilter, 2), " ")
                For Each x In tmp
                    If Len(x) > 0 Then
                        If InStr(1, mber.name, x, vbTextCompare) > 0 Then
                            addit = False
                            Exit For
                        End If
                    End If
                Next
                If addit Then
                    Set nn = CodeView.Nodes.Add(Nodes(e.mType), tvwChild, , NodeName, e.mType + i)
                    Set nn.Tag = e
                Else
                    'Stop
                End If
            ElseIf InStr(1, mber.name, txtFilter, vbTextCompare) > 0 Then
                Set nn = CodeView.Nodes.Add(Nodes(e.mType), tvwChild, , NodeName, e.mType + i)
                Set nn.Tag = e
            End If
        Else
            Err.Clear
            Set nn = CodeView.Nodes.Add(Nodes(e.mType), tvwChild, , NodeName, e.mType + i)
            Set nn.Tag = e
            'If mType = vbext_mt_Event Then Debug.Print "proto: " & nn.Tag & " key:" & key & " err:" & Err.Description 'some garbage is appearing here...
        End If
                
    Next
    
    NodeName = ActiveCodeModule.parent.name
    If mnuShowLineCount.Checked Then NodeName = NodeName & " " & ActiveCodeModule.CountOfLines
    
    CodeView.Nodes("cv").Text = NodeName
    Nodes(vbext_mt_Const).Sorted = True
    Nodes(vbext_mt_Variable).Sorted = True
    Nodes(vbext_mt_Property).Sorted = True
    Nodes(vbext_mt_Method).Sorted = True
    Nodes(vbext_mt_Event).Sorted = True
    Unfreeze CodeView.hwnd
    
End Sub

'crashs when compiled but not when debugging grrrr
Private Function GetTotalLOC()

    Dim comp As VBComponent
    Dim proj As VBProject
    Dim tot As Long

    On Error Resume Next
     Set proj = g_VBInstance.ActiveVBProject
     'For Each proj In g_VBInstance.VBProjects
       For Each comp In proj.VBComponents
            If Len(comp.name) > 0 Then  'i think related files cause crash on accessing comp.codemodule .name will be blank so we skip..
                tot = tot + comp.CodeModule.CountOfLines
            End If
       Next
    'Next

    GetTotalLOC = tot

End Function

Private Sub lblFilter_Click()
    txtFilter.Text = ""
End Sub
 
Private Sub mnuCopyPublic_Click()
    'On Error Resume Next
    Dim n As Node
    Dim x() As String
    Dim Text As String
    Dim a As Long
    Dim e As CEntry
    
    If Nodes(vbext_mt_Variable).Children > 0 Then
        push x, "'Variables"
        For Each n In CodeView.Nodes
            If Not n.parent Is Nothing Then
                If n.parent = Nodes(vbext_mt_Variable) Then
                        Set e = n.Tag
                        If e.scope = 0 Then
                            push x(), e.proto
                        End If
                        Debug.Print e.proto
                End If
            End If
        Next
        push x, ""
    End If
    
    If Nodes(vbext_mt_Event).Children > 0 Then
        push x, "'Events"
        For Each n In CodeView.Nodes
            If Not n.parent Is Nothing Then
                If n.parent = Nodes(vbext_mt_Event) Then
                        Set e = n.Tag
                        Text = e.proto
                        If Left(Text, 7) = "Public " Then Text = Replace(Text, "Public ", "", , 1)
                        If InStr(1, Text, "Private") < 1 Then
                            push x(), Text
                        End If
                        Debug.Print Text
                End If
            End If
        Next
        push x, ""
    End If
    
    If Nodes(vbext_mt_Property).Children > 0 Then
        push x, "'Properties"
        For Each n In CodeView.Nodes
            If Not n.parent Is Nothing Then
                If n.parent = Nodes(vbext_mt_Property) Then
                        Set e = n.Tag
                        Text = e.proto
                        Text = Replace(Text, "Property Get", "Property")
                        If Left(Text, 7) = "Public " Then Text = Replace(Text, "Public ", "", , 1)
                        push x(), Text
                End If
            End If
        Next
        push x, ""
    End If
    
    If Nodes(vbext_mt_Method).Children > 0 Then
        push x, "'Methods"
        For Each n In CodeView.Nodes
            If Not n.parent Is Nothing Then
                If n.parent = Nodes(vbext_mt_Method) Then
                        Set e = n.Tag
                        Text = e.proto
                        If Left(Text, 7) = "Public " Then Text = Replace(Text, "Public ", "", , 1)
                        If n.Image = 1 Then push x(), Text
                End If
            End If
        Next
    End If

    Clipboard.Clear
    Clipboard.SetText Join(x, vbCrLf)
        
End Sub

Private Sub mnuExtractAsHTML_Click()
    On Error Resume Next
    Dim body As String
    
    If ActiveCodeModule Is Nothing Then Exit Sub
    If curEntry Is Nothing Then Exit Sub
    If CodeView.SelectedItem Is Nothing Then Exit Sub
    
    body = ActiveCodeModule.Lines(curEntry.loc, curEntry.lineCount)
    Clipboard.Clear
    Clipboard.SetText htmlize(body)
    
End Sub

Private Sub mnuExtractAsText_Click()
    On Error Resume Next
    
    If ActiveCodeModule Is Nothing Then Exit Sub
    If CodeView.SelectedItem Is Nothing Then Exit Sub
    If curEntry Is Nothing Then Exit Sub
    
    Clipboard.Clear
    Clipboard.SetText ActiveCodeModule.Lines(curEntry.loc, curEntry.lineCount)
End Sub

Private Sub mnuFindReferences_Click()
    On Error Resume Next
    Dim txt As String, a As Long
    
    If ActiveCodeModule Is Nothing Then Exit Sub
    If CodeView.SelectedItem Is Nothing Then Exit Sub
    
    txt = CodeView.SelectedItem.Text 'if there is a space in function name, line count is on strip it
    a = InStr(1, txt, " ")
    If a > 0 Then txt = Trim(Mid(txt, 1, a))
    
    frmFindAll.LaunchAndDoSearch txt
End Sub

Private Sub mnuShowLineCount_Click()
    If Not initilized Then Exit Sub
    mnuShowLineCount.Checked = Not mnuShowLineCount.Checked
    SaveMySetting "ShowLineCount", CInt(mnuShowLineCount.Checked)
    filterChanged = True
    Reload
End Sub

Private Sub Timer_Timer()

    
'    'this used to autoreload if line count changed..this is to often
'    'the following might work better refreshing the treeview when a complete new member was added..
'    If Not ActiveCodeModule Is Nothing Then
'        If ActiveCodeModule.Members.Count <> PrevMemberCount Then
'            PrevMemberCount = ActiveCodeModule.Members.Count
'            filterChanged = True
'        End If
'    End If
'
'    'reloading constantly while coding has side effects such as causes jumps in syntax check etc
'    'reload function will exit with no changes if module has not changed, and if filter has not changed
'    Reload
    
End Sub

Private Sub txtFilter_Change()
    
    'we cheat and also use txtFilter as a basic command line entry point..
    If VBA.Left(txtFilter, 1) = "?" Then
        If LCase(txtFilter) = "?loc" Then txtFilter = txtFilter & " = " & GetTotalLOC()
        Exit Sub
    End If
    
    If VBA.Left(txtFilter, 1) = "-" Then 'they are typing a subtractive filter..give them time to formulate it..
        If Len(txtFilter) = 1 Then Exit Sub
        If VBA.Right(txtFilter, 1) = "," Or VBA.Right(txtFilter, 1) = " " Then Exit Sub
    End If
    
    filterChanged = True
    Reload
    
End Sub

Private Sub UserDocument_Resize()
    On Error Resume Next
    
    CodeView.Width = UserDocument.ScaleWidth - 50
    CodeView.Height = UserDocument.ScaleHeight - fraFilter.Height - 50
    fraFilter.Top = UserDocument.ScaleHeight - fraFilter.Height - 25
    fraFilter.Width = CodeView.Width
    txtFilter.Width = fraFilter.Width - txtFilter.Left - 25
    
    If DEBUGMODE Then
        CodeView.Height = (CodeView.Height - 50) / 2
        lstDbg.Height = CodeView.Height
        lstDbg.Top = CodeView.Top + CodeView.Height + 25
        lstDbg.Width = CodeView.Width
    End If
    
End Sub

Private Sub UserDocument_Show()
    On Error Resume Next
    lstDbg.Visible = DEBUGMODE
    lstDbg.Left = CodeView.Left
    UserDocument.MinWidth = 100  'we dont want scroll bars to auto show..
    UserDocument.MinHeight = 100
    If Not initilized Then InitCodeView
    If ActiveCodeModule Is Nothing Then
        If g_VBInstance.ActiveCodePane Is Nothing Then Exit Sub
        If g_VBInstance.ActiveCodePane.CodeModule Is Nothing Then Exit Sub
        Reload g_VBInstance.ActiveCodePane.CodeModule
    End If
End Sub

Private Sub UserDocument_Terminate()
    On Error Resume Next
    SaveMySetting ProjectName, Trim(txtFilter.Text)
End Sub
